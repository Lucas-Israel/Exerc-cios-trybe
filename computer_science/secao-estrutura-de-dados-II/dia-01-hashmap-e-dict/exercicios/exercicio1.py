# Uma certa empresa tem uma estrutura hierarquizada onde cada pessoa reporta a
# uma √∫nica outra pessoa. Cada pessoa tem um score que √© o total de pessoas
# que est√£o abaixo dela, incluindo subordinados de seus subordinados, al√©m
# dela pr√≥pria. Isso significa que uma pessoa que n√£o tem nenhuma equipe tem
# score 1. Uma pessoa com apenas um subordinado e esse subordinado n√£o tem
# equipe, tem score 2.

# Escreva um m√©todo que calcule o score de uma determinada pessoa.

# üëÄ De olho na dica: para saber o score de uma pessoa, voc√™ precisa saber o
# score das pessoas da equipe dela, correto? Qual estrat√©gia utiliza a mesma
# fun√ß√£o dentro dela pr√≥pria?

# Exemplo de subordinados:

# - 1 => 2, 3

# - 2 => 4

# - 3 => sem subordinados

# - 4 => 5, 6

# - 5 => 7

# - 6 => sem subordinados

# - 7 => sem subordinados


# Neste exemplo, o score de cada pessoa √©:

# - 1 => 5 (score 2) + 1 (score 3) + 1 (score dele pr√≥prio) = 7

# - 2 => 4 (score 4) + 1 (score dele pr√≥prio) = 5

# - 3 => 1 (score dele pr√≥prio)

# - 4 => 2 (score 5) + 1 (score 6) + 1 (score dele pr√≥prio) = 4

# - 5 => 1 (score 7) + 1 (score dele pr√≥prio) = 2

# - 6 => 1 (score dele pr√≥prio)

# - 7 => 1 (score dele pr√≥prio)

# ‚ö†Ô∏è Fa√ßa a an√°lise de complexidade da sua solu√ß√£o.

# B√¥nus: √â muito comum em entrevistas que, quando a pessoa resolve o problema
# dentro do tempo, fa√ßam-se perguntas "follow-up", que dificultam a quest√£o.
# Os follow-ups abaixo s√£o opcionais.

# Follow-ups:

# Caso a empresa precise fazer essa consulta frequentemente, como voc√™ pode
# tornar essas consultas mais eficientes? Como voc√™ pode guardar o resultado
# de consultas anteriores?

# Escreva um m√©todo para incluir uma nova pessoa na equipe de uma outra pessoa.
# Seu m√©todo deve considerar que cada pessoa pode ter no m√°ximo k pessoas em
# seu time. Se o time estiver cheio, a nova contratada pode ser alocada na
# equipe de qualquer pessoa abaixo dela, n√£o precisando ser na equipe
# imediatamente abaixo.

# Se voc√™ adicionar uma nova contrata√ß√£o √† lista de subordinadas, a estrutura
# que voc√™ fez no follow-up 1 est√° desatualizada. Modifique suas fun√ß√µes para
# que essa estrutura seja atualizada junto com a adi√ß√£o de uma nova
# contrata√ß√£o. Fa√ßa isso sem rodar de novo a fun√ß√£o score() e lembre-se de
# atualizar todos os scores desde a pessoa da presid√™ncia at√© a equipe que a
# nova contrata√ß√£o entrou.


# class Hierarquia:
#     def __init__(self, subs):
#         self.subs = subs
#         self.scores = {}

#     def score_calculator(self, person):
#         if person in self.scores:
#             return self.scores[person]

#         counter = 1

#         for element in self.subs[person]:
#             counter += self.score_calculator(element)
#         self.scores[person] = counter

#         return counter


# Complexidade O(n)


class Hierarchy:
    def __init__(self, k):
        self.subordinates = {}
        self.scores = {}
        self.k = k

    def add_person(self, boss, person):
        if not boss:
            self.subordinates[person] = []
            self.scores[person] = 1
            return

        self.scores[boss] += 1

        if len(self.subordinates[boss]) < self.k:
            self.subordinates[boss].append(person)
            self.subordinates[person] = []
            self.scores[person] = 1
        else:
            self.add_person(self.subordinates[boss][0], person)

    def get_score(self, person):
        return self.scores[person]


# Complexidade O(1)
